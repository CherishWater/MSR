<?xml version="1.0" encoding="utf-8" ?>
<externList>
  <data alias="cfg" type="bool" name="bLog" size="1" xsi:type="element" />
  <data alias="cfg" type="num" name="nLog" size="1" xsi:type="element" />
  <data alias="cfg" type="string" name="sGENERICCONV" size="1" xsi:type="element" />
  <data alias="cfg" type="string" name="sGEOMETRYLIB" size="1" xsi:type="element" />
  <data alias="cfg" type="string" name="sGEOMETRYLIB_RS" size="1" xsi:type="element" />
  <data alias="cfg" type="string" name="sPATHCONVEYOR" size="1" xsi:type="element" />
  <data alias="cfg" type="string" name="sPATHDETECTION" size="1" xsi:type="element" />
  <data alias="cfg" type="string" name="sPATHENCODER" size="1" xsi:type="element" />
  <data alias="cfg" type="string" name="sPATHLANGUAGE" size="1" xsi:type="element" />
  <data alias="cfg" type="string" name="sPATHTEMPLATE" size="1" xsi:type="element" />
  <data alias="cfg" type="string" name="sSETTINGPATH" size="1" xsi:type="element" />
  <data alias="cfg" type="string" name="sVERSION" size="1" xsi:type="element" />
  <data alias="cfg" type="tool" name="tPointer" size="1" xsi:type="element" />
  <data alias="cfg" type="trsf" name="trApproach" size="1" xsi:type="element" />
  <data alias="cnv" type="bool" name="bLOG" size="1" xsi:type="element" />
  <data alias="cnv" type="bool" name="bUseUserCenter" size="1" xsi:type="element" />
  <data alias="cnv" type="frame" name="fConveyor" size="1" xsi:type="element" />
  <data alias="cnv" type="frame" name="fDetection" size="1" xsi:type="element" />
  <data alias="cnv" type="num" name="nBufferSize" size="1" xsi:type="element" />
  <data alias="cnv" type="num" name="nClockPeriod" size="1" xsi:type="element" />
  <data alias="cnv" type="num" name="nDetection2Rob" size="1" xsi:type="element" />
  <data alias="cnv" type="num" name="nENCRESOLUTION" size="1" xsi:type="element" />
  <data alias="cnv" type="num" name="nENCSCALEFACTOR" size="1" xsi:type="element" />
  <data alias="cnv" type="num" name="nFirDelay" size="1" xsi:type="element" />
  <data alias="cnv" type="num" name="nFirOrdre" size="1" xsi:type="element" />
  <data alias="cnv" type="num" name="nLatchLockDist" size="1" xsi:type="element" />
  <data alias="cnv" type="num" name="nPosMatchTol" size="1" xsi:type="element" />
  <data alias="cnv" type="num" name="nTrackWinHeight" size="1" xsi:type="element" />
  <data alias="cnv" type="string" name="sClockSigName" size="1" xsi:type="element" />
  <data alias="cnv" type="string" name="sConveyorName" size="1" xsi:type="element" />
  <data alias="cnv" type="string" name="sDetectionLib" size="1" xsi:type="element" />
  <data alias="cnv" type="string" name="sDwnLimSigName" size="1" xsi:type="element" />
  <data alias="cnv" type="string" name="sEncoderLib" size="1" xsi:type="element" />
  <data alias="cnv" type="string" name="sGeometryLib" size="1" xsi:type="element" />
  <data alias="cnv" type="string" name="sUpLimSigName" size="1" xsi:type="element" />
  <data alias="det" type="num" name="nMaxNumOfObject" size="1" xsi:type="element" />
  <data alias="enc" type="num" name="nLatchPeriod" size="1" xsi:type="element" />
  <data alias="geometry" type="bool" name="bIsScara" size="1" xsi:type="element" />
  <data alias="geometry" type="bool" name="bLinear" size="1" xsi:type="element" />
  <data alias="lang" type="string" name="sCircular" size="1" xsi:type="element" />
  <data alias="lang" type="string" name="sLinear" size="1" xsi:type="element" />
  <data alias="lang" type="string" name="sListOfMessage" size="72" xsi:type="array" />
  <data alias="lang" type="string" name="sMenu" size="60" xsi:type="array" />
  <data alias="lang" type="string" name="sNONE" size="1" xsi:type="element" />
  <data alias="lang" type="trsf" name="trTrsf" size="4" xsi:type="array" />
  <data alias="pg" type="num" name="nNumOfTxtBox" size="1" xsi:type="element" />
  <data alias="swap" type="configRx" name="cVision" size="3" xsi:type="array" />
  <data alias="swap" type="configRs" name="cVisionRS" size="3" xsi:type="array" />
  <data alias="swap" type="configRx" name="cWinCenter" size="1" xsi:type="element" />
  <data alias="swap" type="configRs" name="cWinCenterRS" size="1" xsi:type="element" />
  <data alias="swap" type="configRx" name="cWinDown" size="2" xsi:type="array" />
  <data alias="swap" type="configRs" name="cWinDownRS" size="2" xsi:type="array" />
  <data alias="swap" type="configRx" name="cWinUp" size="2" xsi:type="array" />
  <data alias="swap" type="configRs" name="cWinUpRS" size="2" xsi:type="array" />
  <data alias="swap" type="trsf" name="trVision" size="3" xsi:type="array" />
  <data alias="swap" type="trsf" name="trWinCenter" size="1" xsi:type="element" />
  <data alias="swap" type="trsf" name="trWinDown" size="2" xsi:type="array" />
  <data alias="swap" type="trsf" name="trWinUp" size="2" xsi:type="array" />
  <data alias="out" type="dio" name="b2Out0" size="1" xsi:type="element" />
  <data alias="out" type="dio" name="bOut0" size="1" xsi:type="element" />
  <data alias="out" type="dio" name="cDout0" size="1" xsi:type="element" />
  <data alias="out" type="dio" name="fOut0" size="1" xsi:type="element" />
  <data alias="out" type="dio" name="mOut0" size="1" xsi:type="element" />
  <data alias="sck" type="sio" name="skCognex" size="10" xsi:type="array" />
  <data alias="sck" type="sio" name="skFromRobot" size="10" xsi:type="array" />
  <procedure>
    <header>procedure ut:uSpy()</header>
    <alias>ut</alias>
  </procedure>
  <procedure>
    <header>procedure ut:addStrToString(string x_sInString,string&amp; x_sOutString[1],string x_sDelimiter,string&amp; x_sSubString[1])</header>
    <alias>ut</alias>
  </procedure>
  <procedure>
    <header>procedure ut:addNumToString(string x_sInString,string&amp; x_sOutString[1],string x_sDelimiter,num&amp; x_nValue[1])</header>
    <alias>ut</alias>
  </procedure>
  <procedure>
    <header>procedure ut:_trsf2String(trsf x_TRSF,string x_sLabel,string x_sDelimiter,num x_nFieldMask,string&amp; x_sTRSF[1])</header>
    <alias>ut</alias>
  </procedure>
  <procedure>
    <header>procedure ut:_toString(num x_nValue,string x_sFormat,string&amp; x_string[1])</header>
    <alias>ut</alias>
  </procedure>
  <procedure>
    <header>procedure ut:_getVersion(num&amp; x_nVersion[1],num&amp; x_nRevision[1],num&amp; x_nEdit[1],num&amp; x_nError[1])</header>
    <alias>ut</alias>
  </procedure>
  <procedure>
    <header>procedure ut:_decode(string x_sInString,string&amp; x_sOutString[1],string x_sBreakChar,num x_nMode)</header>
    <alias>ut</alias>
  </procedure>
  <procedure>
    <header>procedure up:type(num x_nX,num x_nY,string x_sMessage)</header>
    <alias>up</alias>
  </procedure>
  <procedure>
    <header>procedure up:txtBoxDynUpdate(string x_sDynamicText)</header>
    <alias>up</alias>
  </procedure>
  <procedure>
    <header>procedure up:txtBoxDyn(string x_sMessage,num x_nRow,num x_nCol,num x_nBoxWidth)</header>
    <alias>up</alias>
  </procedure>
  <procedure>
    <header>procedure up:read(num x_nX,num x_nY,string&amp; x_sMsg[1],num x_nLength,bool x_bCrypt)</header>
    <alias>up</alias>
  </procedure>
  <procedure>
    <header>procedure up:nullKey(num&amp; x_nKey[1])</header>
    <alias>up</alias>
  </procedure>
  <procedure>
    <header>procedure up:msgBox(string x_sMessage,num x_nBoxWidth,string x_sChoice,num&amp; x_nSelectedFKey[1])</header>
    <alias>up</alias>
  </procedure>
  <procedure>
    <header>procedure up:listUpdate(num x_nFirst)</header>
    <alias>up</alias>
  </procedure>
  <procedure>
    <header>procedure up:listSetSize(num x_nPx,num x_nPy,num x_nPBottomX,num x_nPBottomY)</header>
    <alias>up</alias>
  </procedure>
  <procedure>
    <header>procedure up:listEvent(num x_nKey,num&amp; x_nIndex[1],string&amp; x_sItem[1])</header>
    <alias>up</alias>
  </procedure>
  <procedure>
    <header>procedure up:listCreate(string x_sTitle)</header>
    <alias>up</alias>
  </procedure>
  <procedure>
    <header>procedure up:listAdd(string&amp; x_sItems[1])</header>
    <alias>up</alias>
  </procedure>
  <procedure>
    <header>procedure up:clear(num x_nX,num x_nY)</header>
    <alias>up</alias>
  </procedure>
  <procedure>
    <header>procedure pg:setListOfItems(num x_nListNumber,string&amp; x_sItemList[1],num&amp; x_nError[1])</header>
    <alias>pg</alias>
  </procedure>
  <procedure>
    <header>procedure pg:setFieldValue(string x_sCaption,string x_sValue,num&amp; x_nError[1])</header>
    <alias>pg</alias>
  </procedure>
  <procedure>
    <header>procedure pg:handle(num&amp; x_nKey[1])</header>
    <alias>pg</alias>
  </procedure>
  <procedure>
    <header>procedure pg:getFieldValue(string x_sCaption,string&amp; x_sValue[1],num x_nError)</header>
    <alias>pg</alias>
  </procedure>
  <procedure>
    <header>procedure pg:getErrorMessage(string&amp; x_sMessage[1])</header>
    <alias>pg</alias>
  </procedure>
  <procedure>
    <header>procedure pg:getCaption(string&amp; x_sCaption[1])</header>
    <alias>pg</alias>
  </procedure>
  <procedure>
    <header>procedure pg:display(num x_nPosX,num x_nPosY,bool x_bDrawFrame)</header>
    <alias>pg</alias>
  </procedure>
  <procedure>
    <header>procedure pg:create(string x_sEntryBoxName,string x_sMenu,num x_nFocused,num&amp; x_nError[1])</header>
    <alias>pg</alias>
  </procedure>
  <procedure>
    <header>procedure lang:Page(num x_nPageNum,string&amp; x_sCustomTxt[1],num x_nMenu,bool x_bRefresh,num&amp; x_nSelectedMenu[1])</header>
    <alias>lang</alias>
  </procedure>
  <procedure>
    <header>procedure lang:Menu(num x_nMenu,string x_sCustomTxt)</header>
    <alias>lang</alias>
  </procedure>
  <procedure>
    <header>procedure geometry:SetPoint(num x_nSelectData)</header>
    <alias>geometry</alias>
  </procedure>
  <procedure>
    <header>procedure geometry:GetPoint(num x_nSelectData)</header>
    <alias>geometry</alias>
  </procedure>
  <procedure>
    <header>procedure geometry:BuildFrame(string x_sFrameName,frame&amp; x_fFrame[1],num&amp; x_nError[1])</header>
    <alias>geometry</alias>
  </procedure>
  <procedure>
    <header>procedure enc:setResolution(num x_nResolution)</header>
    <alias>enc</alias>
  </procedure>
  <procedure>
    <header>procedure enc:kill()</header>
    <alias>enc</alias>
  </procedure>
  <procedure>
    <header>procedure enc:getValue(bool x_bUseLatch,num&amp; x_nEncValue[1])</header>
    <alias>enc</alias>
  </procedure>
  <procedure>
    <header>procedure enc:getResolution(num&amp; x_nResolution[1])</header>
    <alias>enc</alias>
  </procedure>
  <procedure>
    <header>procedure enc:create(num x_nEncNum,string x_sTask)</header>
    <alias>enc</alias>
  </procedure>
  <procedure>
    <header>procedure cnv:init(num x_nConvNum,num&amp; x_nError)</header>
    <alias>cnv</alias>
  </procedure>
  <procedure>
    <header>procedure cnv:getErrorMessage(string&amp; x_sMessage[1])</header>
    <alias>cnv</alias>
  </procedure>
</externList>