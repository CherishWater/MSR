<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="encoder">
    <Locals>
      <Local name="l_bRisenEdge" type="bool" xsi:type="array" size="1" />
      <Local name="l_bTriggerAck" type="bool" xsi:type="array" size="1" />
      <Local name="l_nTriggerCount" type="num" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[
begin
  // This routine manages the encoder input
  //
  //
  //----------------------------------------------------------------
  //
  l_bTriggerAck=true
  l_nTriggerCount=0
  do
    // Read current encoder position
    nEncValue=aioGet(aiEncCurrentPos)
    //
    // Re-enable the latch feature of the encoder input
    //   if latching enabled by the conveyor library, and 
    //   if there isn't a part being detected
    if (bLatchEnabled==true) and (diLatchSignal==!bLatchLevel)
      if doEnableLatch==false and l_bTriggerAck==true
        // Enable latch. (The output will be set automatically to off after latching)
        doEnableLatch=true
        l_bTriggerAck=false
      endIf
    endIf
    //
    // Check if latch feature is enabled by conveyor library
    if bLatchEnabled==true
      // check for rising edge on the Latch Input
      call _DetectIOEdge((diEncLatched==true),bMemoLatchState,l_bRisenEdge)
      //
      if l_bRisenEdge==true
        // Check number of latch for part detection
        l_nTriggerCount=l_nTriggerCount+1
        l_bTriggerAck=true
        if l_nTriggerCount>=nLatchPeriod
          // Compute Latched value
          nEncLatchedVal=aioGet(aiEncLatchedPos)
          bPartLatched=true
          l_nTriggerCount=0
        endIf
      endIf
    endIf
    //
    // ***** RESET SECTION
    if bReset
      doResetErr=true
      nEncLatchedVal=nEncValue=0
      l_nTriggerCount=0
      bReset=false
    endIf
    delay(0)
  until false
end
]]></Code>
  </Program>
</Programs>